openapi: 3.0.3
info:
  title: Catalog API
  description: REST API for exposing the code intelligence knowledge base via HTTP endpoints for search, collection details, type information, graph relationships, and diff comparisons.
  version: 1.0.0
  contact:
    name: Cataloger Team
    email: team@cataloger.dev
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:5000
    description: Development server
  - url: https://api.cataloger.dev
    description: Production server

paths:
  /search:
    get:
      summary: Search knowledge base
      description: Search the knowledge base for entities matching the query criteria
      operationId: search
      tags:
        - Search
      parameters:
        - name: q
          in: query
          required: true
          description: Search query text
          schema:
            type: string
            maxLength: 500
            example: "user"
        - name: kinds
          in: query
          required: false
          description: Entity types to search for
          schema:
            type: array
            items:
              type: string
              enum: [type, collection, field, query, service, endpoint]
            example: [type, collection]
        - name: limit
          in: query
          required: false
          description: Maximum number of results to return
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 50
        - name: offset
          in: query
          required: false
          description: Number of results to skip
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: filters
          in: query
          required: false
          description: Additional filters as JSON object
          schema:
            type: object
            example: {"repository": "myapp", "lastModified": "2024-01-01"}
        - name: sortBy
          in: query
          required: false
          description: Field to sort by
          schema:
            type: string
            enum: [relevance, name, lastModified]
            default: relevance
        - name: sortOrder
          in: query
          required: false
          description: Sort order
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /collections/{name}:
    get:
      summary: Get collection details
      description: Get detailed information about a specific collection including declared and observed schemas
      operationId: getCollection
      tags:
        - Collections
      parameters:
        - name: name
          in: path
          required: true
          description: Collection name
          schema:
            type: string
            example: "vendors"
      responses:
        '200':
          description: Collection details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionDetail'
        '404':
          description: Collection not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /types/{fqcn}:
    get:
      summary: Get type details
      description: Get detailed information about a specific type including fields, attributes, collections, and usage data
      operationId: getType
      tags:
        - Types
      parameters:
        - name: fqcn
          in: path
          required: true
          description: Fully qualified class name
          schema:
            type: string
            example: "MyApp.Models.User"
      responses:
        '200':
          description: Type details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypeDetail'
        '404':
          description: Type not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /graph:
    get:
      summary: Get graph data
      description: Get graph data for a specific node with configurable depth and edge filters
      operationId: getGraph
      tags:
        - Graph
      parameters:
        - name: node
          in: query
          required: true
          description: Node identifier in format "type:name" or "collection:name"
          schema:
            type: string
            pattern: '^(type|collection):.+'
            example: "collection:vendors"
        - name: depth
          in: query
          required: false
          description: Maximum traversal depth
          schema:
            type: integer
            minimum: 1
            maximum: 5
            default: 2
        - name: edgeKinds
          in: query
          required: false
          description: Edge types to include
          schema:
            type: array
            items:
              type: string
              enum: [READS, WRITES, REFERS_TO]
            example: [READS, WRITES]
        - name: maxNodes
          in: query
          required: false
          description: Maximum number of nodes to return
          schema:
            type: integer
            minimum: 10
            maximum: 1000
            default: 100
        - name: includeProperties
          in: query
          required: false
          description: Include node properties in response
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Graph data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GraphResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Node not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /diff/type/{fqcn}:
    get:
      summary: Get type diff
      description: Get differences between two versions of a type definition
      operationId: getTypeDiff
      tags:
        - Diff
      parameters:
        - name: fqcn
          in: path
          required: true
          description: Fully qualified class name
          schema:
            type: string
            example: "MyApp.Models.User"
        - name: fromSha
          in: query
          required: true
          description: Source commit SHA
          schema:
            type: string
            pattern: '^[a-f0-9]{40}$'
            example: "abc123def456"
        - name: toSha
          in: query
          required: true
          description: Target commit SHA
          schema:
            type: string
            pattern: '^[a-f0-9]{40}$'
            example: "def456ghi789"
        - name: includeFieldDetails
          in: query
          required: false
          description: Include detailed field changes
          schema:
            type: boolean
            default: true
        - name: includeAttributeChanges
          in: query
          required: false
          description: Include attribute changes
          schema:
            type: boolean
            default: true
      responses:
        '200':
          description: Type diff
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypeDiff'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Type or commit not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /health:
    get:
      summary: Health check
      description: Check API health status
      operationId: healthCheck
      tags:
        - Health
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"
                  timestamp:
                    type: string
                    format: date-time
                  version:
                    type: string
                    example: "1.0.0"
        '503':
          description: API is unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    SearchResult:
      type: object
      required:
        - id
        - entityType
        - name
        - relevanceScore
        - lastModified
      properties:
        id:
          type: string
          description: Unique identifier
          example: "type:MyApp.Models.User"
        entityType:
          type: string
          enum: [type, collection, field, query, service, endpoint]
          description: Type of entity
          example: "type"
        name:
          type: string
          description: Entity name
          example: "User"
        description:
          type: string
          description: Entity description
          example: "User entity representing application users"
        relevanceScore:
          type: number
          format: double
          minimum: 0.0
          maximum: 1.0
          description: Relevance score
          example: 0.95
        metadata:
          type: object
          description: Additional metadata
          example: {"fieldCount": 5, "isAbstract": false}
        repository:
          type: string
          description: Source repository
          example: "myapp"
        filePath:
          type: string
          description: Source file path
          example: "src/Models/User.cs"
        lineNumber:
          type: integer
          description: Line number in source file
          example: 15
        commitSha:
          type: string
          description: Commit SHA
          example: "abc123def456"
        lastModified:
          type: string
          format: date-time
          description: Last modification time
          example: "2024-01-15T10:30:00Z"

    SearchResponse:
      type: object
      required:
        - results
        - totalCount
        - limit
        - offset
        - hasMore
        - queryTime
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/SearchResult'
          description: Search results
        totalCount:
          type: integer
          description: Total number of matching results
          example: 150
        limit:
          type: integer
          description: Maximum results per page
          example: 50
        offset:
          type: integer
          description: Number of results skipped
          example: 0
        hasMore:
          type: boolean
          description: Whether more results are available
          example: true
        resultCountsByType:
          type: object
          description: Count of results by entity type
          example: {"type": 25, "collection": 15, "field": 10}
        queryTime:
          type: string
          description: Query execution time
          example: "00:00:00.125"

    CollectionDetail:
      type: object
      required:
        - name
        - declaredSchema
        - observedSchema
        - associatedTypes
        - relatedQueries
        - relationships
      properties:
        name:
          type: string
          description: Collection name
          example: "vendors"
        description:
          type: string
          description: Collection description
          example: "Vendor information collection"
        declaredSchema:
          $ref: '#/components/schemas/SchemaInfo'
        observedSchema:
          $ref: '#/components/schemas/SchemaInfo'
        associatedTypes:
          type: array
          items:
            type: string
          description: Associated type names
          example: ["Vendor", "VendorContact"]
        relatedQueries:
          type: array
          items:
            $ref: '#/components/schemas/QueryInfo'
          description: Related query operations
        relationships:
          type: array
          items:
            $ref: '#/components/schemas/RelationshipInfo'
          description: Collection relationships
        hasDrift:
          type: boolean
          description: Whether schema drift exists
          example: false
        driftFlags:
          type: array
          items:
            type: string
          description: Schema drift indicators
          example: ["missing_field", "type_mismatch"]
        documentCount:
          type: integer
          description: Number of documents in collection
          example: 1250
        lastSampled:
          type: string
          format: date-time
          description: Last sampling time
          example: "2024-01-15T10:30:00Z"
        repository:
          type: string
          description: Source repository
          example: "myapp"
        filePath:
          type: string
          description: Source file path
          example: "src/Data/VendorRepository.cs"
        lineNumber:
          type: integer
          description: Line number in source file
          example: 25
        commitSha:
          type: string
          description: Commit SHA
          example: "abc123def456"

    SchemaInfo:
      type: object
      required:
        - fields
        - requiredFields
        - lastUpdated
      properties:
        fields:
          type: array
          items:
            $ref: '#/components/schemas/FieldInfo'
          description: Schema fields
        requiredFields:
          type: array
          items:
            type: string
          description: Required field names
          example: ["id", "name"]
        constraints:
          type: object
          description: Schema constraints
          example: {"maxLength": 100, "pattern": "^[A-Za-z]+$"}
        lastUpdated:
          type: string
          format: date-time
          description: Last update time
          example: "2024-01-15T10:30:00Z"

    FieldInfo:
      type: object
      required:
        - name
        - type
        - isRequired
        - isNullable
      properties:
        name:
          type: string
          description: Field name
          example: "email"
        type:
          type: string
          description: Field type
          example: "string"
        isRequired:
          type: boolean
          description: Whether field is required
          example: true
        isNullable:
          type: boolean
          description: Whether field is nullable
          example: false
        attributes:
          type: array
          items:
            type: string
          description: Field attributes
          example: ["BsonElement", "Required"]
        description:
          type: string
          description: Field description
          example: "User email address"

    QueryInfo:
      type: object
      required:
        - operation
        - repository
        - filePath
        - lineNumber
      properties:
        operation:
          type: string
          enum: [Find, Update, Insert, Delete, Aggregate]
          description: Query operation type
          example: "Find"
        filter:
          type: string
          description: Query filter
          example: "{'status': 'active'}"
        projection:
          type: string
          description: Query projection
          example: "{'name': 1, 'email': 1}"
        repository:
          type: string
          description: Source repository
          example: "myapp"
        filePath:
          type: string
          description: Source file path
          example: "src/Services/UserService.cs"
        lineNumber:
          type: integer
          description: Line number in source file
          example: 45

    RelationshipInfo:
      type: object
      required:
        - type
        - targetEntity
        - repository
        - filePath
        - lineNumber
      properties:
        type:
          type: string
          enum: [READS, WRITES, REFERS_TO]
          description: Relationship type
          example: "READS"
        targetEntity:
          type: string
          description: Target entity name
          example: "users"
        description:
          type: string
          description: Relationship description
          example: "Reads user data for validation"
        repository:
          type: string
          description: Source repository
          example: "myapp"
        filePath:
          type: string
          description: Source file path
          example: "src/Services/UserService.cs"
        lineNumber:
          type: integer
          description: Line number in source file
          example: 67

    TypeDetail:
      type: object
      required:
        - fullyQualifiedName
        - name
        - fields
        - collectionMappings
        - usageStats
        - changeSummary
      properties:
        fullyQualifiedName:
          type: string
          description: Fully qualified class name
          example: "MyApp.Models.User"
        name:
          type: string
          description: Class name
          example: "User"
        namespace:
          type: string
          description: Namespace
          example: "MyApp.Models"
        description:
          type: string
          description: Class description
          example: "User entity representing application users"
        fields:
          type: array
          items:
            $ref: '#/components/schemas/FieldDetail'
          description: Class fields
        bsonAttributes:
          type: array
          items:
            type: string
          description: BSON attributes
          example: ["BsonIgnoreExtraElements", "BsonDiscriminator"]
        collectionMappings:
          type: array
          items:
            $ref: '#/components/schemas/CollectionMapping'
          description: Collection mappings
        usageStats:
          $ref: '#/components/schemas/UsageStatistics'
        changeSummary:
          $ref: '#/components/schemas/ChangeSummary'
        repository:
          type: string
          description: Source repository
          example: "myapp"
        filePath:
          type: string
          description: Source file path
          example: "src/Models/User.cs"
        lineNumber:
          type: integer
          description: Line number in source file
          example: 15
        commitSha:
          type: string
          description: Commit SHA
          example: "abc123def456"
        lastModified:
          type: string
          format: date-time
          description: Last modification time
          example: "2024-01-15T10:30:00Z"

    FieldDetail:
      type: object
      required:
        - name
        - type
        - isRequired
        - isNullable
      properties:
        name:
          type: string
          description: Field name
          example: "email"
        type:
          type: string
          description: Field type
          example: "string"
        isRequired:
          type: boolean
          description: Whether field is required
          example: true
        isNullable:
          type: boolean
          description: Whether field is nullable
          example: false
        attributes:
          type: array
          items:
            type: string
          description: Field attributes
          example: ["BsonElement", "Required"]
        description:
          type: string
          description: Field description
          example: "User email address"
        defaultValue:
          type: string
          description: Default value
          example: "null"
        validationRules:
          type: array
          items:
            type: string
          description: Validation rules
          example: ["EmailAddress", "MaxLength(100)"]

    CollectionMapping:
      type: object
      required:
        - collectionName
        - mappingType
        - repository
        - filePath
        - lineNumber
      properties:
        collectionName:
          type: string
          description: Collection name
          example: "users"
        mappingType:
          type: string
          enum: [Primary, Secondary, Reference]
          description: Mapping type
          example: "Primary"
        repository:
          type: string
          description: Source repository
          example: "myapp"
        filePath:
          type: string
          description: Source file path
          example: "src/Data/UserRepository.cs"
        lineNumber:
          type: integer
          description: Line number in source file
          example: 25

    UsageStatistics:
      type: object
      required:
        - queryCount
        - repositoryCount
        - usedInRepositories
        - lastUsed
      properties:
        queryCount:
          type: integer
          description: Number of queries using this type
          example: 45
        repositoryCount:
          type: integer
          description: Number of repositories using this type
          example: 3
        usedInRepositories:
          type: array
          items:
            type: string
          description: Repository names
          example: ["myapp", "admin", "api"]
        lastUsed:
          type: string
          format: date-time
          description: Last usage time
          example: "2024-01-15T10:30:00Z"
        commonOperations:
          type: array
          items:
            type: string
          description: Common operations
          example: ["Find", "Update", "Insert"]

    ChangeSummary:
      type: object
      required:
        - totalChanges
        - addedFields
        - removedFields
        - modifiedFields
        - lastChange
      properties:
        totalChanges:
          type: integer
          description: Total number of changes
          example: 12
        addedFields:
          type: integer
          description: Number of added fields
          example: 3
        removedFields:
          type: integer
          description: Number of removed fields
          example: 1
        modifiedFields:
          type: integer
          description: Number of modified fields
          example: 8
        lastChange:
          type: string
          format: date-time
          description: Last change time
          example: "2024-01-15T10:30:00Z"
        recentCommits:
          type: array
          items:
            type: string
          description: Recent commit SHAs
          example: ["abc123def456", "def456ghi789"]

    GraphNode:
      type: object
      required:
        - id
        - entityType
        - name
        - incomingEdges
        - outgoingEdges
      properties:
        id:
          type: string
          description: Node identifier
          example: "collection:vendors"
        entityType:
          type: string
          description: Entity type
          example: "collection"
        name:
          type: string
          description: Node name
          example: "vendors"
        description:
          type: string
          description: Node description
          example: "Vendor information collection"
        properties:
          type: object
          description: Node properties
          example: {"documentCount": 1250, "lastUpdated": "2024-01-15"}
        incomingEdges:
          type: array
          items:
            $ref: '#/components/schemas/GraphEdge'
          description: Incoming edges
        outgoingEdges:
          type: array
          items:
            $ref: '#/components/schemas/GraphEdge'
          description: Outgoing edges
        repository:
          type: string
          description: Source repository
          example: "myapp"
        filePath:
          type: string
          description: Source file path
          example: "src/Data/VendorRepository.cs"
        lineNumber:
          type: integer
          description: Line number in source file
          example: 25
        commitSha:
          type: string
          description: Commit SHA
          example: "abc123def456"

    GraphEdge:
      type: object
      required:
        - id
        - sourceNodeId
        - targetNodeId
        - edgeType
        - createdAt
      properties:
        id:
          type: string
          description: Edge identifier
          example: "edge:123"
        sourceNodeId:
          type: string
          description: Source node ID
          example: "collection:vendors"
        targetNodeId:
          type: string
          description: Target node ID
          example: "type:Vendor"
        edgeType:
          type: string
          enum: [READS, WRITES, REFERS_TO]
          description: Edge type
          example: "READS"
        description:
          type: string
          description: Edge description
          example: "Reads vendor data"
        properties:
          type: object
          description: Edge properties
          example: {"frequency": "high", "lastUsed": "2024-01-15"}
        repository:
          type: string
          description: Source repository
          example: "myapp"
        filePath:
          type: string
          description: Source file path
          example: "src/Services/VendorService.cs"
        lineNumber:
          type: integer
          description: Line number in source file
          example: 67
        commitSha:
          type: string
          description: Commit SHA
          example: "abc123def456"
        createdAt:
          type: string
          format: date-time
          description: Creation time
          example: "2024-01-15T10:30:00Z"

    GraphResponse:
      type: object
      required:
        - centerNode
        - nodes
        - edges
        - totalNodes
        - totalEdges
        - queryTime
      properties:
        centerNode:
          $ref: '#/components/schemas/GraphNode'
        nodes:
          type: array
          items:
            $ref: '#/components/schemas/GraphNode'
          description: All nodes in the graph
        edges:
          type: array
          items:
            $ref: '#/components/schemas/GraphEdge'
          description: All edges in the graph
        totalNodes:
          type: integer
          description: Total number of nodes
          example: 25
        totalEdges:
          type: integer
          description: Total number of edges
          example: 45
        queryTime:
          type: string
          description: Query execution time
          example: "00:00:00.250"

    TypeDiff:
      type: object
      required:
        - fullyQualifiedName
        - fromCommitSha
        - toCommitSha
        - addedFields
        - removedFields
        - modifiedFields
        - diffGeneratedAt
      properties:
        fullyQualifiedName:
          type: string
          description: Fully qualified class name
          example: "MyApp.Models.User"
        fromCommitSha:
          type: string
          description: Source commit SHA
          example: "abc123def456"
        toCommitSha:
          type: string
          description: Target commit SHA
          example: "def456ghi789"
        addedFields:
          type: array
          items:
            $ref: '#/components/schemas/FieldChange'
          description: Added fields
        removedFields:
          type: array
          items:
            $ref: '#/components/schemas/FieldChange'
          description: Removed fields
        modifiedFields:
          type: array
          items:
            $ref: '#/components/schemas/FieldChange'
          description: Modified fields
        attributeChanges:
          type: array
          items:
            $ref: '#/components/schemas/AttributeChange'
          description: Attribute changes
        diffGeneratedAt:
          type: string
          format: date-time
          description: Diff generation time
          example: "2024-01-15T10:30:00Z"
        repository:
          type: string
          description: Source repository
          example: "myapp"
        filePath:
          type: string
          description: Source file path
          example: "src/Models/User.cs"

    FieldChange:
      type: object
      required:
        - fieldName
        - fieldType
        - changeType
      properties:
        fieldName:
          type: string
          description: Field name
          example: "email"
        fieldType:
          type: string
          description: Field type
          example: "string"
        changeType:
          type: string
          enum: [Added, Removed, Modified]
          description: Change type
          example: "Added"
        oldValue:
          type: string
          description: Old value
          example: "null"
        newValue:
          type: string
          description: New value
          example: "string"
        description:
          type: string
          description: Change description
          example: "Added email field for user authentication"

    AttributeChange:
      type: object
      required:
        - attributeName
        - changeType
      properties:
        attributeName:
          type: string
          description: Attribute name
          example: "BsonElement"
        changeType:
          type: string
          enum: [Added, Removed, Modified]
          description: Change type
          example: "Added"
        oldValue:
          type: string
          description: Old value
          example: "null"
        newValue:
          type: string
          description: New value
          example: "email"
        description:
          type: string
          description: Change description
          example: "Added BsonElement attribute for email field"

    ErrorResponse:
      type: object
      required:
        - type
        - title
        - status
        - detail
        - timestamp
        - traceId
      properties:
        type:
          type: string
          format: uri
          description: Error type URI
          example: "https://api.cataloger.dev/errors/validation"
        title:
          type: string
          description: Error title
          example: "Validation Error"
        status:
          type: integer
          description: HTTP status code
          example: 400
        detail:
          type: string
          description: Error detail
          example: "The 'q' parameter is required and cannot be empty"
        instance:
          type: string
          description: Request instance
          example: "/search"
        errorCode:
          type: string
          description: Application error code
          example: "VALIDATION_ERROR"
        extensions:
          type: object
          description: Additional error information
          example: {"field": "q", "value": ""}
        timestamp:
          type: string
          format: date-time
          description: Error timestamp
          example: "2024-01-15T10:30:00Z"
        traceId:
          type: string
          description: Request trace ID
          example: "abc123def456"

tags:
  - name: Search
    description: Search operations
  - name: Collections
    description: Collection operations
  - name: Types
    description: Type operations
  - name: Graph
    description: Graph operations
  - name: Diff
    description: Diff operations
  - name: Health
    description: Health check operations
